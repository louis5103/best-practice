# ============================================================================
# Spring Boot 애플리케이션 설정
# ============================================================================
# 
# 이 파일은 Spring Boot 애플리케이션의 핵심 설정을 담당합니다.
# 마치 자동차의 대시보드에서 엔진, 에어컨, 라디오 등을 조절하는 것처럼,
# 여기서 데이터베이스, 로깅, 프로파일 등의 다양한 기능들을 설정할 수 있습니다.
#
# YAML 형식을 사용하는 이유:
# - 사람이 읽기 쉽고 계층 구조를 명확하게 표현할 수 있습니다
# - 주석을 달 수 있어서 설정의 의미를 명확히 할 수 있습니다
# - 복잡한 설정도 깔끔하게 정리할 수 있습니다

# ============================================================================
# 애플리케이션 기본 설정
# ============================================================================
spring:
  application:
    # 애플리케이션 이름 설정
    # 로그나 모니터링 시스템에서 이 이름으로 식별됩니다
    name: javafx-demo
  
  # ============================================================================
  # 데이터베이스 설정 (H2 Database)
  # ============================================================================
  # H2를 선택한 이유:
  # - 설치나 별도 설정이 필요 없어서 데모나 개발에 최적
  # - 파일 기반이므로 데이터가 유지됨
  # - 웹 콘솔을 제공하여 데이터를 쉽게 확인할 수 있음
  datasource:
    # JDBC URL 설정
    # file: 접두사로 파일 기반 데이터베이스 사용
    # DB_CLOSE_ON_EXIT=FALSE: 애플리케이션 종료 시에도 데이터 유지
    url: jdbc:h2:file:./data/demo;DB_CLOSE_ON_EXIT=FALSE;AUTO_RECONNECT=TRUE
    username: sa
    password: 
    driver-class-name: org.h2.Driver
  
  # ============================================================================
  # JPA/Hibernate 설정
  # ============================================================================
  jpa:
    # H2 데이터베이스 최적화 설정
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      # 개발 단계에서는 create-drop을 사용하여 매번 스키마를 새로 만듭니다
      # 프로덕션에서는 validate나 update를 사용해야 합니다
      ddl-auto: create-drop
    show-sql: true  # 실행되는 SQL을 콘솔에 표시 (개발 시 유용)
    properties:
      hibernate:
        format_sql: true  # SQL을 보기 좋게 포맷팅
  
  # ============================================================================
  # H2 웹 콘솔 설정
  # ============================================================================
  # 웹 콘솔을 활성화하면 브라우저에서 데이터베이스를 직접 확인할 수 있습니다
  # 이는 개발 단계에서 매우 유용한 기능입니다
  h2:
    console:
      enabled: true
      path: /h2-console  # http://localhost:8080/h2-console로 접속 가능
      settings:
        web-allow-others: true  # 외부에서도 접속 가능 (개발용)

# ============================================================================
# 로깅 설정
# ============================================================================
# 로깅 레벨을 적절히 설정하면 개발과 디버깅이 훨씬 수월해집니다
# 마치 자동차의 계기판에서 엔진 상태를 확인하는 것과 같은 역할입니다
logging:
  level:
    root: INFO  # 전체 로그 레벨
    com.company.javafxdemo: DEBUG  # 우리 애플리케이션만 상세 로그
    org.springframework: INFO  # Spring 프레임워크 로그
    org.hibernate.SQL: DEBUG  # SQL 쿼리 로그
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE  # SQL 파라미터 로그
  pattern:
    # 로그 출력 패턴 설정
    # 시간, 로그레벨, 클래스명, 메시지를 포함하여 디버깅에 유용합니다
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"

# ============================================================================
# 애플리케이션별 커스텀 설정
# ============================================================================
# 우리 애플리케이션에서만 사용하는 설정들을 여기에 정의합니다
# 이렇게 하면 코드에서 @Value 애노테이션으로 쉽게 사용할 수 있습니다
app:
  # UI 관련 설정
  ui:
    title: "JavaFX + Spring Boot Demo"
    width: 1000
    height: 700
    resizable: true
  
  # 데이터 관련 설정  
  data:
    # 초기 데이터 로딩 여부
    load-sample-data: true
    # 사용자 관리 기능 설정
    user-management:
      max-users: 1000
      default-department: "개발팀"

# ============================================================================
# 프로파일별 설정
# ============================================================================
# 다양한 환경(개발, 테스트, 프로덕션)에서 다른 설정을 사용할 수 있습니다
# 현재는 기본 프로파일만 사용하지만, 필요시 확장할 수 있습니다

---
# 개발 프로파일 설정 (spring.profiles.active=dev 시 적용)
spring:
  config:
    activate:
      on-profile: dev
  
  # 개발 환경에서는 더 상세한 로깅 사용
  jpa:
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true

logging:
  level:
    com.company.javafxdemo: TRACE  # 개발 시에는 모든 로그 출력

---
# 프로덕션 프로파일 설정 (spring.profiles.active=prod 시 적용)
spring:
  config:
    activate:
      on-profile: prod
  
  # 프로덕션에서는 보안과 성능을 우선시
  jpa:
    show-sql: false  # SQL 로그 비활성화 (성능상 이유)
    hibernate:
      ddl-auto: validate  # 스키마 변경 방지
  
  h2:
    console:
      enabled: false  # 보안상 웹 콘솔 비활성화

logging:
  level:
    root: WARN  # 프로덕션에서는 경고 이상만 로그
    com.company.javafxdemo: INFO
